/**
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.immutable.sdk.api

import com.immutable.sdk.api.model.CreateProjectRequest
import com.immutable.sdk.api.model.CreateProjectResponse
import com.immutable.sdk.api.model.GetProjectsResponse
import com.immutable.sdk.api.model.Project

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiErrorModel
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ProjectsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "https://api.ropsten.x.immutable.com")
        }
    }

    /**
    * Create a project
    * Create a project
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @param createProjectRequest create a project 
    * @return CreateProjectResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createProject(imXSignature: kotlin.String, imXTimestamp: kotlin.String, createProjectRequest: CreateProjectRequest) : CreateProjectResponse {
        val localVariableConfig = createProjectRequestConfig(imXSignature = imXSignature, imXTimestamp = imXTimestamp, createProjectRequest = createProjectRequest)

        val localVarResponse = request<CreateProjectRequest, CreateProjectResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ClientException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ServerException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
        }
    }

    /**
    * To obtain the request config of the operation createProject
    *
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @param createProjectRequest create a project 
    * @return RequestConfig
    */
    fun createProjectRequestConfig(imXSignature: kotlin.String, imXTimestamp: kotlin.String, createProjectRequest: CreateProjectRequest) : RequestConfig<CreateProjectRequest> {
        val localVariableBody = createProjectRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        imXSignature.apply { localVariableHeaders["IMX-Signature"] = this.toString() }
        imXTimestamp.apply { localVariableHeaders["IMX-Timestamp"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a project
    * Get a project
    * @param id Project ID 
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @return Project
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProject(id: kotlin.String, imXSignature: kotlin.String, imXTimestamp: kotlin.String) : Project {
        val localVariableConfig = getProjectRequestConfig(id = id, imXSignature = imXSignature, imXTimestamp = imXTimestamp)

        val localVarResponse = request<Unit, Project>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Project
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ClientException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ServerException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
        }
    }

    /**
    * To obtain the request config of the operation getProject
    *
    * @param id Project ID 
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @return RequestConfig
    */
    fun getProjectRequestConfig(id: kotlin.String, imXSignature: kotlin.String, imXTimestamp: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        imXSignature.apply { localVariableHeaders["IMX-Signature"] = this.toString() }
        imXTimestamp.apply { localVariableHeaders["IMX-Timestamp"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/projects/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get projects
    * Get projects
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @param pageSize Page size of the result (optional)
    * @param cursor Cursor (optional)
    * @param orderBy Property to sort by (optional)
    * @param direction Direction to sort (asc/desc) (optional)
    * @return GetProjectsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProjects(imXSignature: kotlin.String, imXTimestamp: kotlin.String, pageSize: kotlin.Int? = null, cursor: kotlin.String? = null, orderBy: kotlin.String? = null, direction: kotlin.String? = null) : GetProjectsResponse {
        val localVariableConfig = getProjectsRequestConfig(imXSignature = imXSignature, imXTimestamp = imXTimestamp, pageSize = pageSize, cursor = cursor, orderBy = orderBy, direction = direction)

        val localVarResponse = request<Unit, GetProjectsResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetProjectsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ClientException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                val errorModel = localVarError.body?.let { ApiErrorModel(localVarError.body) }
                throw ServerException("${localVarError.statusCode} ${errorModel?.message ?: localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse, errorModel)
            }
        }
    }

    /**
    * To obtain the request config of the operation getProjects
    *
    * @param imXSignature String created by signing wallet address and timestamp 
    * @param imXTimestamp Unix Epoc timestamp 
    * @param pageSize Page size of the result (optional)
    * @param cursor Cursor (optional)
    * @param orderBy Property to sort by (optional)
    * @param direction Direction to sort (asc/desc) (optional)
    * @return RequestConfig
    */
    fun getProjectsRequestConfig(imXSignature: kotlin.String, imXTimestamp: kotlin.String, pageSize: kotlin.Int?, cursor: kotlin.String?, orderBy: kotlin.String?, direction: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (direction != null) {
                    put("direction", listOf(direction.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        imXSignature.apply { localVariableHeaders["IMX-Signature"] = this.toString() }
        imXTimestamp.apply { localVariableHeaders["IMX-Timestamp"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
